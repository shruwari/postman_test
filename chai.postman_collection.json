{
	"info": {
		"_postman_id": "4a74d2b7-02df-4753-b965-df3381eb9fb6",
		"name": "chai",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22680938"
	},
	"item": [
		{
			"name": "chai Assertion code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Name comparision \", function () {\r",
							"\r",
							"let a = {\r",
							"\"name\" : \"shruti\"\r",
							"\r",
							"};\r",
							"\r",
							"let b = {\r",
							"\"name\" : \"shruti\"\r",
							"\r",
							"};\r",
							"       pm.expect(a).to.eql(b,'1');\r",
							"       pm.expect(a).to.equal(a,'2'); \r",
							"       pm.expect(true).to.be.true;\r",
							"       pm.expect(null).to.be.null;\r",
							"       pm.expect(undefined).to.be.undefined;\r",
							"       pm.expect([]).to.be.empty;\r",
							"       pm.expect([1,2,3]).to.be.include(2);\r",
							"       pm.expect(2).to.be.oneOf([1,2,3]);\r",
							"       //pm.expect('i am shruti').to.match(\"/shruti/\");\r",
							"       //pm.expect(a).to.not.eql(b);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://example.com",
					"protocol": "http",
					"host": [
						"example",
						"com"
					]
				}
			},
			"response": []
		},
		{
			"name": "chai Assertion",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"\r",
							"let a = {\r",
							"\"name\" : \"shruti\"\r",
							"\r",
							"};\r",
							"\r",
							"let b = {\r",
							"\"name\" : \"shruti\"\r",
							"\r",
							"};\r",
							"      pm.expect(a).to.eql(b,'1');\r",
							"   pm.expect(a).to.equal(b,'2'); \r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://example.com",
					"protocol": "http",
					"host": [
						"example",
						"com"
					]
				}
			},
			"response": []
		},
		{
			"name": "assertion on array",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"console.log(jsonData.filters);\r",
							"let manufecturer =jsonData.filters[2];\r",
							"console.log(manufecturer);\r",
							"pm.test(\"manufecturer should not be allowed\",function(){\r",
							"pm.expect(manufecturer.name).to.eql(\"MANUFACTURER\");\r",
							"\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://www.mocky.io/v2/5ab350d62f00005a00ca3663",
					"protocol": "http",
					"host": [
						"www",
						"mocky",
						"io"
					],
					"path": [
						"v2",
						"5ab350d62f00005a00ca3663"
					]
				}
			},
			"response": []
		},
		{
			"name": "assertion on array 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let commentStatus= jsonData.prefs.comments.status;\r",
							"console.log(commentStatus);\r",
							"\r",
							"pm.test(\" verifying that comment is disabled\" ,function()\r",
							"{\r",
							"pm.expect(commentStatus).to.eql(\"disabled\");\r",
							"});\r",
							"   \r",
							"let Boardstatus = jsonData.limits['54bba24af6196bd5f824e563'].boards.totalPerMember.status;\r",
							"\r",
							"console.log(Boardstatus);\r",
							"\r",
							"pm.test(\"Board status is ok\" , function()\r",
							"{\r",
							"pm.expect(Boardstatus).to.eql(\"ok\");\r",
							"\r",
							"});\r",
							" let Status2;\r",
							"for (let key in jsonData.limits)\r",
							"{\r",
							"console.log(key,jsonData.limits[key]);\r",
							"if(jsonData.limits[key].hasOwnProperty('boards'))\r",
							"{\r",
							"     Status2 =jsonData.limits[key].boards.status;\r",
							"}\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://www.mocky.io/v2/5ab34d8c2f00006600ca3652",
					"protocol": "http",
					"host": [
						"www",
						"mocky",
						"io"
					],
					"path": [
						"v2",
						"5ab34d8c2f00006600ca3652"
					]
				}
			},
			"response": []
		}
	]
}